{"ast":null,"code":"var _jsxFileName = \"/home/drawbridge/Documents/csharp/Todo-Back-Front/Todo-App/react-todo-frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\nimport './App.css';\nconst URI = 'http://localhost:5000/api/todoitems/';\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks); // async function fetchTodoItems() {\n  //   const response = await fetch(URI);\n  //   response.json()\n  //   .then(response => setTasks(response))\n  //   .catch(err => console.log(err));\n  // }\n  // async function addTask(content) {\n  //   const newTask =  { name: content, completed: false }\n  //   const requestOptions = {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify(newTask)\n  //   };\n  //     const response = await fetch(URI, requestOptions);\n  //     response.json()\n  //     .then(response => setTasks(response))\n  //     .catch(err => console.log(err));\n  //     console.log(response);\n  //     setTasks([...tasks, newTask]);\n  // }\n  // useEffect(() => {\n  //   fetchTodoItems();\n  // },[]);\n\n  async function addTask(content, title) {\n    const newTask = {\n      id: 'todo-' + nanoid(),\n      title: title,\n      content: content,\n      completed: false\n    };\n    setTasks([...taskList, addTask]);\n  }\n\n  const taskList = tasks.map(task => /*#__PURE__*/React.createElement(Todo, {\n    content: task.content,\n    title: task.title,\n    id: task.id,\n    completed: task.isComplete,\n    key: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }));\n  const taskNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n\n  function toggleTaskCompleted(id) {\n    const updatedTask = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTask);\n  }\n\n  function deleteTask(id) {\n    const newTaskList = tasks.filter(task => id !== task.id);\n    setTasks(newTaskList);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FilterButton, {\n    name: \"All\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FilterButton, {\n    name: \"Completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FilterButton, {\n    name: \"To do\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, remainingTasks), /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"list\",\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, taskList));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/drawbridge/Documents/csharp/Todo-Back-Front/Todo-App/react-todo-frontend/src/App.js"],"names":["React","useState","useEffect","nanoid","Todo","Form","Header","FilterButton","URI","App","props","tasks","setTasks","addTask","content","title","newTask","id","completed","taskList","map","task","isComplete","toggleTaskCompleted","deleteTask","taskNoun","length","remainingTasks","updatedTask","newTaskList","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\n\nimport './App.css';\n\nconst URI = 'http://localhost:5000/api/todoitems/';\n\n  function App(props) {\n\n    const [tasks, setTasks] = useState(props.tasks);\n\n    // async function fetchTodoItems() {\n    //   const response = await fetch(URI);\n    //   response.json()\n    //   .then(response => setTasks(response))\n    //   .catch(err => console.log(err));\n    // }\n\n    // async function addTask(content) {\n    //   const newTask =  { name: content, completed: false }\n      \n    //   const requestOptions = {\n    //     method: 'POST',\n    //     headers: { 'Content-Type': 'application/json' },\n    //     body: JSON.stringify(newTask)\n    //   };\n  \n    //     const response = await fetch(URI, requestOptions);\n    //     response.json()\n    //     .then(response => setTasks(response))\n    //     .catch(err => console.log(err));\n    //     console.log(response);\n  \n    //     setTasks([...tasks, newTask]);\n    // }\n    \n    // useEffect(() => {\n    //   fetchTodoItems();\n    // },[]);\n\n    async function addTask(content, title) {\n      const newTask =  { id: 'todo-'+ nanoid(), title: title, content: content, completed: false }\n      setTasks([...taskList, addTask]);\n    }  \n\n    const taskList = tasks.map(task => (\n      <Todo \n          content={task.content}\n          title={task.title}\n          id={task.id}\n          completed={task.isComplete}\n          key={task.id}\n          toggleTaskCompleted={toggleTaskCompleted}\n          deleteTask={deleteTask}\n          />\n        )\n      );\n  \n  const taskNoun = taskList.length > 1 ? 'tasks' : 'task'; \n  const remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n      \n  function toggleTaskCompleted(id) {\n    const updatedTask = tasks.map(task => {\n      if(id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTask);\n  }\n\n  function deleteTask(id) {\n    const newTaskList = tasks.filter(task => id !== task.id);\n    setTasks(newTaskList);\n  }\n\n  return (\n\n    <div className=\"todoapp stack-large\">\n        <Header/>\n        <Form addTask={addTask}/>\n        <FilterButton name=\"All\"/>\n        <FilterButton name=\"Completed\"/>\n        <FilterButton name=\"To do\"/>\n\n        <h2 id=\"list-heading\">\n          {remainingTasks}\n        </h2>\n        <ul\n          role=\"list\"\n          className=\"todo-list stack-large stack-exception\"\n          aria-labelledby=\"list-heading\"\n        >\n          {taskList}\n\n        </ul>\n      </div>\n    );\n  }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}