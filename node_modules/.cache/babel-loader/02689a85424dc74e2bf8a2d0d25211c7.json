{"ast":null,"code":"var _jsxFileName = \"/home/drawbridge/Documents/csharp/Todo-Back-Front/Todo-App/react-todo-frontend/src/App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\nimport './App.css';\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst URI = `http://localhost:5000/api/todoitems/`;\nconst FILTER_MAP = {\n  All: () => true,\n  Completed: task => task.isComplete,\n  Todo: task => !task.isComplete\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('All');\n  const prevTaskLength = usePrevious(tasks.length);\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/React.createElement(FilterButton, {\n    key: name,\n    name: name,\n    isPressed: name == filter,\n    setFilter: setFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }));\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/React.createElement(Todo, {\n    content: task.content,\n    title: task.title,\n    completed: task.isComplete,\n    id: task.id,\n    key: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n  const taskNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n\n  async function addTask(content, title) {\n    const newTask = {\n      id: 'todo-' + nanoid(),\n      title: title,\n      content: content,\n      completed: false\n    };\n    const response = await fetch(URI, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(newTask)\n    });\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTask = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTask);\n  }\n\n  function deleteTask(id) {\n    const newTaskList = tasks.filter(task => id !== task.id);\n    setTasks(newTaskList);\n  }\n\n  function editTask(id, newContent, newTitle) {\n    const newTaskList = tasks.map(task => {\n      if (id === task.id) {\n        console.log({\n          newContent,\n          newTitle\n        });\n        return { ...task,\n          content: newContent,\n          title: newTitle\n        };\n      }\n\n      return task;\n    });\n    setTasks(newTaskList);\n  }\n\n  function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n\n  const listHeadingRef = useRef(null);\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n\n  async function fetchData() {\n    const apiUrl = URI;\n    const response = await fetch(apiUrl);\n    const json = await response.json();\n    console.log(json);\n    setTasks(json);\n  }\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }), filterList, /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"list\",\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    tabIndex: \"-1\",\n    ref: listHeadingRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, remainingTasks), taskList));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/drawbridge/Documents/csharp/Todo-Back-Front/Todo-App/react-todo-frontend/src/App.js"],"names":["React","useState","useRef","useEffect","nanoid","Todo","Form","Header","FilterButton","usePrevious","value","ref","current","URI","FILTER_MAP","All","Completed","task","isComplete","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","filter","setFilter","prevTaskLength","length","filterList","map","name","taskList","content","title","id","toggleTaskCompleted","deleteTask","editTask","taskNoun","remainingTasks","addTask","newTask","completed","response","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","updatedTask","newTaskList","newContent","newTitle","console","log","listHeadingRef","focus","fetchData","apiUrl","json"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\nimport './App.css';\n\nfunction usePrevious(value) {\n\tconst ref = useRef();\n\tuseEffect(() => {\n\t  ref.current = value;\n\t});\n\treturn ref.current;\n}\n\nconst URI = `http://localhost:5000/api/todoitems/`;\n\nconst FILTER_MAP = {\n  All: () => true,\n  Completed: task => task.isComplete,\n  Todo: task => !task.isComplete\n}\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('All');\n  const prevTaskLength = usePrevious(tasks.length);\n     \n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key={name}\n      name={name}\n      isPressed={name == filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo \n          content={task.content}\n          title={task.title}\n          completed={task.isComplete}\n          id={task.id}\n          key={task.id}\n          toggleTaskCompleted={toggleTaskCompleted}\n          deleteTask={deleteTask}\n          editTask={editTask}\n      />\n    )\n  );\n \n  \tconst taskNoun = taskList.length > 1 ? 'tasks' : 'task'; \n  \tconst remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n\n\tasync function addTask(content, title) {\n\t\t\n\t\tconst newTask =  { id: 'todo-'+ nanoid(), title: title, content: content, completed: false }\n\t\tconst response = await fetch(URI, {\n\t\t\tmethod: 'POST',\n\t\t\tmode: 'cors', \n\t\t\tcache: 'no-cache',\n\t\t\tcredentials: 'same-origin',\n\t\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tredirect: 'follow',\n\t\t\treferrerPolicy: 'no-referrer', \n\t\t\tbody: JSON.stringify(newTask)\n\t\t});\n\t\tsetTasks([...tasks, newTask]);\n\t}  \n      \n  \tfunction toggleTaskCompleted(id) {\n    \tconst updatedTask = tasks.map(task => {\n      \tif(id === task.id) {\n\t\treturn {...task, completed: !task.completed}\n\t\t}\n      return task;\n\t});\n    setTasks(updatedTask);\n  }\n\n  function deleteTask(id) {\n    const newTaskList = tasks.filter(task => id !== task.id);\n    setTasks(newTaskList);\n  }\n\n  function editTask(id, newContent, newTitle) {\n    const newTaskList = tasks.map(task => {\n      if(id === task.id) {\n        console.log({newContent, newTitle});\n        return {...task, content: newContent, title: newTitle}\n      }\n      return task;\n    });\n    setTasks(newTaskList);\n  }\n\n  function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n\n  const listHeadingRef = useRef(null);\n\n  useEffect(() => {\n\tif (tasks.length - prevTaskLength === -1) {\n\t  listHeadingRef.current.focus();\n\t}\n  }, [tasks.length, prevTaskLength]);\n\n  async function fetchData() {\n\tconst apiUrl = URI;\n    const response = await fetch(apiUrl)\n\tconst json = await response.json()\n\tconsole.log(json);\n\tsetTasks(json);\n}\n\n  useEffect(() => {\n\t\n\tfetchData();\n  }, []);\n\n  return (\t\n    <div className=\"todoapp stack-large\">\n        <Header/>\n        <Form addTask={addTask}/>\n        {filterList}\n        <ul role=\"list\" className=\"todo-list stack-large stack-exception\" aria-labelledby=\"list-heading\">\n        <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n          {remainingTasks}\n        </h2>\n        {taskList}\n        </ul>\n      </div>\n    );\n  }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}