{"ast":null,"code":"var _jsxFileName = \"/home/drawbridge/Documents/react/react-hooks/react-counter/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\nimport './App.css';\n\nfunction App(props) {\n  const [tasks, setTasks] = useState([]);\n\n  async function fetchTodoItems(uri) {\n    const response = await fetch(uri);\n    response.json().then(response => setTasks(response)).catch(err => console.log(err));\n  }\n\n  useEffect(() => {\n    fetchTodoItems('http://localhost:5000/api/todoitems/');\n  }, []);\n  const taskList = tasks.map(task => /*#__PURE__*/React.createElement(Todo, {\n    name: task.content,\n    id: task.id,\n    completed: task.isComplete,\n    key: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }));\n  const taskNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n\n  function addTask(content) {\n    const newTask = {\n      name: content,\n      completed: false\n    };\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(newTask)\n    };\n\n    async function postTodo(uri) {\n      const response = await fetch(uri);\n      response.json().then(response => setTasks(response)).catch(err => console.log(err));\n    }\n\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updateTask = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updateTask);\n  }\n\n  function deleteTask(id) {\n    const newTaskList = tasks.filter(task => id !== task.id);\n    setTasks(newTaskList);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FilterButton, {\n    name: \"All\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FilterButton, {\n    name: \"Completed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FilterButton, {\n    name: \"To do\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, remainingTasks), /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"list\",\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, taskList));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/drawbridge/Documents/react/react-hooks/react-counter/src/App.js"],"names":["React","useState","useEffect","nanoid","Todo","Form","Header","FilterButton","App","props","tasks","setTasks","fetchTodoItems","uri","response","fetch","json","then","catch","err","console","log","taskList","map","task","content","id","isComplete","toggleTaskCompleted","deleteTask","taskNoun","length","remainingTasks","addTask","newTask","name","completed","requestOptions","method","headers","body","JSON","stringify","postTodo","updateTask","newTaskList","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\n\nimport './App.css';\n\n  function App(props) {\n\n    const [tasks, setTasks] = useState([]);\n\n    async function fetchTodoItems(uri) {\n      const response = await fetch(uri);\n      response.json()\n      .then(response => setTasks(response))\n      .catch(err => console.log(err));\n    }\n  \n    useEffect(() => {\n      fetchTodoItems('http://localhost:5000/api/todoitems/');\n    },[]);\n\n    const taskList = tasks.map(task => (\n      <Todo \n          name={task.content}\n          id={task.id}\n          completed={task.isComplete}\n          key={task.id}\n          toggleTaskCompleted={toggleTaskCompleted}\n          deleteTask={deleteTask}\n          />\n        )\n      );\n  \n  const taskNoun = taskList.length > 1 ? 'tasks' : 'task'; \n  const remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n      \n  function addTask(content) {\n    const newTask =  { name: content, completed: false }\n    \n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(newTask)\n    };\n\n    async function postTodo(uri) {\n      const response = await fetch(uri);\n      response.json()\n      .then(response => setTasks(response))\n      .catch(err => console.log(err));\n    }\n\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updateTask = tasks.map(task => {\n      if(id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updateTask);\n  }\n\n  function deleteTask(id) {\n    const newTaskList = tasks.filter(task => id !== task.id);\n    setTasks(newTaskList);\n  }\n\n  return (\n\n    <div className=\"todoapp stack-large\">\n        <Header/>\n        <Form addTask={addTask}/>\n        <FilterButton name=\"All\"/>\n        <FilterButton name=\"Completed\"/>\n        <FilterButton name=\"To do\"/>\n\n        <h2 id=\"list-heading\">\n          {remainingTasks}\n        </h2>\n        <ul\n          role=\"list\"\n          className=\"todo-list stack-large stack-exception\"\n          aria-labelledby=\"list-heading\"\n        >\n          {taskList}\n\n        </ul>\n      </div>\n    );\n  }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}