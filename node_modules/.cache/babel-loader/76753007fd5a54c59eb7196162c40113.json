{"ast":null,"code":"var _jsxFileName = \"/home/drawbridge/Documents/csharp/Todo-Back-Front/Todo-App/react-todo-frontend/src/App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\nimport './App.css';\nconst URI = 'http://localhost:5000/api/todoitems/';\nconst FILTER_MAP = {\n  All: () => true,\n  Completed: task => task.isComplete,\n  Todo: task => !task.isComplete\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/React.createElement(FilterButton, {\n    key: name,\n    name: name,\n    isPressed: name == filter,\n    setFilter: setFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }));\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/React.createElement(Todo, {\n    content: task.content,\n    title: task.title,\n    completed: task.isComplete,\n    id: task.id,\n    key: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n  const taskNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const remainingTasks = `${taskList.length}  ${taskNoun} remaining`; // async function fetchTodoItems() {\n  //   const response = await fetch(URI);\n  //   response.json()\n  //   .then(response => setTasks(response))\n  //   .catch(err => console.log(err));\n  // }\n  // async function addTask(content) {\n  //   const newTask =  { name: content, completed: false }\n  //   const requestOptions = {\n  //     method: 'POST',\n  //     headers: { 'Content-Type': 'application/json' },\n  //     body: JSON.stringify(newTask)\n  //   };\n  //     const response = await fetch(URI, requestOptions);\n  //     response.json()\n  //     .then(response => setTasks(response))\n  //     .catch(err => console.log(err));\n  //     console.log(response);\n  //     setTasks([...tasks, newTask]);\n  // }\n  // useEffect(() => {\n  //   fetchTodoItems();\n  // },[]);\n\n  function addTask(content, title) {\n    const newTask = {\n      id: 'todo-' + nanoid(),\n      title: title,\n      content: content,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTask = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTask);\n  }\n\n  function deleteTask(id) {\n    const newTaskList = tasks.filter(task => id !== task.id);\n    setTasks(newTaskList);\n  }\n\n  function editTask(id, newContent, newTitle) {\n    const newTaskList = tasks.map(task => {\n      if (id === task.id) {\n        console.log({\n          newContent,\n          newTitle\n        });\n        return { ...task,\n          content: newContent,\n          title: newTitle\n        };\n      }\n\n      return task;\n    });\n    setTasks(newTaskList);\n  }\n\n  const listHeadingRef = useRef(null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), filterList, /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"list\",\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    tabIndex: \"-1\",\n    ref: listHeadingRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, remainingTasks), taskList));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/drawbridge/Documents/csharp/Todo-Back-Front/Todo-App/react-todo-frontend/src/App.js"],"names":["React","useState","useRef","useEffect","nanoid","Todo","Form","Header","FilterButton","URI","FILTER_MAP","All","Completed","task","isComplete","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","filter","setFilter","filterList","map","name","taskList","content","title","id","toggleTaskCompleted","deleteTask","editTask","taskNoun","length","remainingTasks","addTask","newTask","completed","updatedTask","newTaskList","newContent","newTitle","console","log","listHeadingRef"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\n\nimport './App.css';\n\nconst URI = 'http://localhost:5000/api/todoitems/';\n\nconst FILTER_MAP = {\n  All: () => true,\n  Completed: task => task.isComplete,\n  Todo: task => !task.isComplete\n}\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n     \n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key={name}\n      name={name}\n      isPressed={name == filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo \n          content={task.content}\n          title={task.title}\n          completed={task.isComplete}\n          id={task.id}\n          key={task.id}\n          toggleTaskCompleted={toggleTaskCompleted}\n          deleteTask={deleteTask}\n          editTask={editTask}\n      />\n    )\n  );\n \n  const taskNoun = taskList.length > 1 ? 'tasks' : 'task'; \n  const remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n\n    // async function fetchTodoItems() {\n    //   const response = await fetch(URI);\n    //   response.json()\n    //   .then(response => setTasks(response))\n    //   .catch(err => console.log(err));\n    // }\n\n    // async function addTask(content) {\n    //   const newTask =  { name: content, completed: false }\n      \n    //   const requestOptions = {\n    //     method: 'POST',\n    //     headers: { 'Content-Type': 'application/json' },\n    //     body: JSON.stringify(newTask)\n    //   };\n  \n    //     const response = await fetch(URI, requestOptions);\n    //     response.json()\n    //     .then(response => setTasks(response))\n    //     .catch(err => console.log(err));\n    //     console.log(response);\n  \n    //     setTasks([...tasks, newTask]);\n    // }\n    \n    // useEffect(() => {\n    //   fetchTodoItems();\n    // },[]);\n\n    function addTask(content, title) {\n      const newTask =  { id: 'todo-'+ nanoid(), title: title, content: content, completed: false }\n      setTasks([...tasks, newTask]);\n    }  \n      \n  function toggleTaskCompleted(id) {\n    const updatedTask = tasks.map(task => {\n      if(id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTask);\n  }\n\n  function deleteTask(id) {\n    const newTaskList = tasks.filter(task => id !== task.id);\n    setTasks(newTaskList);\n  }\n\n  function editTask(id, newContent, newTitle) {\n    const newTaskList = tasks.map(task => {\n      if(id === task.id) {\n        console.log({newContent, newTitle});\n        return {...task, content: newContent, title: newTitle}\n      }\n      return task;\n    });\n    setTasks(newTaskList);\n  }\n\n  const listHeadingRef = useRef(null);\n\n  return (\n    <div className=\"todoapp stack-large\">\n        <Header/>\n        <Form addTask={addTask}/>\n        {filterList}\n        <ul\n          role=\"list\"\n          className=\"todo-list stack-large stack-exception\"\n          aria-labelledby=\"list-heading\"\n        >\n        <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n          {remainingTasks}\n        </h2>\n        {taskList}\n        </ul>\n      </div>\n    );\n  }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}