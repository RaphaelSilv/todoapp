{"ast":null,"code":"var _jsxFileName = \"/home/drawbridge/Documents/csharp/Todo-Back-Front/todo-frontend/src/App.js\";\nimport React, { useState, useRef, useEffect } from 'react';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\nimport './App.css';\nimport { timezones } from './components/Timezones';\nconst URI = `http://localhost:5000/api/todoitems/`;\nconst FILTER_MAP = {\n  All: () => true,\n  Completed: task => task.isComplete,\n  Todo: task => !task.isComplete\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('All');\n  const prevTaskLength = usePrevious(tasks.length);\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/React.createElement(FilterButton, {\n    key: name,\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }));\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/React.createElement(Todo, {\n    content: task.content,\n    lastUpdated: task.lastUpdate,\n    title: task.title,\n    completed: task.isComplete,\n    id: task.id,\n    key: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n  const taskNoun = taskList.length > 1 ? 'tasks' : 'task';\n  const remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n\n  async function fetchTodos() {\n    const apiUrl = URI;\n    const response = await fetch(apiUrl);\n    const json = await response.json();\n    setTasks(json);\n  }\n\n  async function addTask(content, title, timezone) {\n    const newTask = {\n      title: title,\n      content: content,\n      timezone: timezone\n    };\n    const response = await fetch(URI, {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      redirect: 'follow',\n      referrerPolicy: 'no-referrer',\n      body: JSON.stringify(newTask)\n    });\n    const newTaskResponse = await response.json();\n    setTasks([...tasks, newTaskResponse]);\n  }\n\n  async function toggleTaskCompleted(id) {\n    const index = tasks.findIndex(task => task.id === id);\n    const toggledTask = { ...tasks[index],\n      isComplete: !tasks[index].isComplete\n    };\n    tasks[index] = toggledTask;\n    await fetch(URI + id, {\n      method: 'PUT',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      },\n      body: JSON.stringify(toggledTask)\n    });\n    setTasks([...tasks]);\n  }\n\n  async function deleteTask(id) {\n    const updatedTasks = tasks.filter(task => task.id !== id);\n    await fetch(URI + id, {\n      method: 'DELETE'\n    });\n    setTasks(updatedTasks);\n  }\n\n  async function editTask(id, newTodo) {\n    const updatedTask = {\n      id: id,\n      title: newTodo.title,\n      content: newTodo.content\n    };\n    await fetch(URI + id, {\n      method: 'PUT',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      },\n      body: JSON.stringify(updatedTask)\n    });\n    const index = tasks.findIndex(task => task.id === updatedTask.id);\n    tasks[index] = updatedTask;\n    await fetchTodos();\n  }\n\n  function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n\n  const listHeadingRef = useRef(null);\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }), filterList, /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"list\",\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    tabIndex: \"-1\",\n    ref: listHeadingRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, remainingTasks), taskList));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/drawbridge/Documents/csharp/Todo-Back-Front/todo-frontend/src/App.js"],"names":["React","useState","useRef","useEffect","Todo","Form","Header","FilterButton","timezones","URI","FILTER_MAP","All","Completed","task","isComplete","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","setFilter","prevTaskLength","usePrevious","length","filterList","map","name","taskList","content","lastUpdate","title","id","toggleTaskCompleted","deleteTask","editTask","taskNoun","remainingTasks","fetchTodos","apiUrl","response","fetch","json","addTask","timezone","newTask","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","newTaskResponse","index","findIndex","toggledTask","updatedTasks","newTodo","updatedTask","value","ref","current","listHeadingRef","focus"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport Todo from './components/Todo';\nimport Form from './components/Form';\nimport Header from './components/Header';\nimport FilterButton from './components/FilterButton';\nimport './App.css';\nimport { timezones } from './components/Timezones';\n\nconst URI = `http://localhost:5000/api/todoitems/`;\n\nconst FILTER_MAP = {\n  All: () => true,\n  Completed: task => task.isComplete,\n  Todo: task => !task.isComplete\n}\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([]);\n  const [filter, setFilter] = useState('All');\n\n  const prevTaskLength = usePrevious(tasks.length);\n     \n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n      <Todo \n\t\t  content={task.content}\n\t\t  lastUpdated={task.lastUpdate}\n          title={task.title}\n          completed={task.isComplete}\n          id={task.id}\n          key={task.id}\n          toggleTaskCompleted={toggleTaskCompleted}\n          deleteTask={deleteTask}\n          editTask={editTask}\n      />\n    )\n  );\n \n  \tconst taskNoun = taskList.length > 1 ? 'tasks' : 'task'; \n  \tconst remainingTasks = `${taskList.length}  ${taskNoun} remaining`;\n\t \n\tasync function fetchTodos() {\n\t\tconst apiUrl = URI;\n\t\tconst response = await fetch(apiUrl)\n\t\tconst json = await response.json()\n\t\tsetTasks(json);\n\t}\n\n\tasync function addTask(content, title, timezone) {\n\t\t\t\n\t\tconst newTask =  { title: title, content: content, timezone: timezone }\n\t\tconst response = await fetch(URI, {\n\t\t\tmethod: 'POST',\n\t\t\tmode: 'cors', \n\t\t\tcache: 'no-cache',\n\t\t\tcredentials: 'same-origin',\n\t\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tredirect: 'follow',\n\t\t\treferrerPolicy: 'no-referrer', \n\t\t\tbody: JSON.stringify(newTask)\n\t\t});\n\t\tconst newTaskResponse = await response.json();\n\t\tsetTasks([...tasks, newTaskResponse]);\n\t}  \n      \n  \tasync function toggleTaskCompleted(id) {\n\t\t\n\t\tconst index = tasks.findIndex(task => task.id === id);\n\t\tconst toggledTask = {...tasks[index], isComplete: !tasks[index].isComplete}; \n\t\ttasks[index] = toggledTask;\n\n\t\tawait fetch(URI + id, {\n\t\t\tmethod: 'PUT', \n\t\t\tcache: 'no-cache',\n\t\t\tcredentials: 'same-origin',\n\t\t\theaders: {\n\t\t\t 'Content-type': 'application/json; charset=UTF-8' \n\t\t\t},\n\t\t\tbody: JSON.stringify(toggledTask) \n\t});\n\tsetTasks([...tasks]);\n}\n\n  async function deleteTask(id) {\n\n\tconst updatedTasks = tasks.filter(task => task.id !== id);\n\t\n\tawait fetch(URI + id, {\n\t\tmethod: 'DELETE',\n\t});\n\n\tsetTasks(updatedTasks);\t\n  }\n\n  async function editTask(id, newTodo) {\n\n\tconst updatedTask =  { id: id, title: newTodo.title, content: newTodo.content }\n\n\tawait fetch(URI + id, {\n\t\t\tmethod: 'PUT', \n\t\t\tmode: 'cors', \n\t\t\tcache: 'no-cache',\n\t\t\tcredentials: 'same-origin',\n\t\t\theaders: {\n\t\t\t 'Content-type': 'application/json; charset=UTF-8' \n\t\t\t},\n\t\t\tbody: JSON.stringify(updatedTask) \n\t});\n\n\tconst index = tasks.findIndex(task => task.id === updatedTask.id);\n\ttasks[index] = updatedTask; \n\tawait fetchTodos();\n}\n\n  function usePrevious(value) {\n    const ref = useRef();\n    useEffect(() => {\n      ref.current = value;\n    });\n    return ref.current;\n  }\n\n  const listHeadingRef = useRef(null);\n\n  useEffect(() => {\n\tif (tasks.length - prevTaskLength === -1) {\n\t  listHeadingRef.current.focus();\n\t}\n  }, [tasks.length, prevTaskLength]);\n\n  useEffect(() => {\n\tfetchTodos();\n  }, []);\n\n  return (\t\n    <div className=\"todoapp stack-large\">\n        <Header/>\n        <Form addTask={addTask}/>\n        {filterList}\n        <ul role=\"list\" className=\"todo-list stack-large stack-exception\" aria-labelledby=\"list-heading\">\n        <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n          {remainingTasks}\n        </h2>\n        {taskList}\n        </ul>\n      </div>\n    );\n  }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}